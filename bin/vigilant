#!/usr/bin/env node

var colors = require('colors'),
    fs = require('fs'),
    path = require('path'),
    program = require('commander'),
    exec = require('child_process').exec;

// CLI
program
  .version('0.1.0')
  .usage('[options] [commands]')
  .option('-c, --config <file>', 'vigilant.json config pathname (default: ./vigilant.json)')
  .parse(process.argv);

var colors = ['blue','green','yellow', 'magenta', 'cyan'],
    mainLog = makeLog('white', 'vigilant'),
    nameLen = 'vigilant'.length,
    configPath = program.config || './vigilant.json',
    args = program.args,
    children = [],
    opts = {},
    queue = [];

// Get Config
fs.readFile(configPath, function(err, contents) {

  var name;

  //programs in config
  if(contents) {
    var config = null;
    try {
      config = JSON.parse(contents);
    } catch(e) {
      exit("Could not parse 'vigilant.json': " + e);
    }

    //Fire
    for(name in config) {
      var c = config[name];
      //use args as filter
      if(!args.length || args.indexOf(name) !== -1)
        prepare(name, c);
    }

  //programs in arguments
  } else if(args.length) {

    for(var i = 0; i < args.length; i++)
      prepare(args[i], args[i]);

  //programs not found
  } else {
    exit("No arguments to run and could not find '"+configPath+"'");
  }

  //check all
  queue.forEach(function(q) {
    nameLen = Math.max(nameLen, q.name.length);
  });

  //run all
  queue.forEach(function(q) {
    run(q.name, q.cmd);
  });
});

function prepare(name, cmd) {

  var prog = cmd.split(/\s/)[0];
  var ext = path.extname(prog);
  
  if(name === cmd)
    name = prog;

  if(!ext) {
    prog += '.js';
    ext = '.js';
  }

  if(ext === '.js' && fs.existsSync(prog))
    cmd = 'node ' + cmd;


  queue.push({name:name, cmd:cmd});
}

//Runs a config
function run(name, path) {

  var i = children.length;
  var child = null;
  var log = makeLog(getColor(i), name);

  try {
    child = exec(path, opts);
  } catch(e) {
    mainLog("Could not run: " + path);
    return;
  }

  mainLog("'"+name+"' running...");

  child.stdout.on('data', function (data) {
    log(data);
  });

  child.stderr.on('data', function (data) {
    log(String(data).red);
  });

  child.on('close', function (code) {
    mainLog("'"+name+"' exited with " + code);
  });

  children.push(child);
}

//helpers
function makeLog(color, name) {
  var n = pad(name[color]);
  return function(msg) {
    console.log(
      msg.toString()
         .replace(/^\n/m,'')
         .replace(/\n$/m,'')
         .replace(/^/mg, n + ": ")
    );
  };
}

function getColor(i) {
  return colors[i % colors.length];
}

function pad(str) {
  var i = 10-(str.length-10), p = "";
  while(i > 0) p += " ", i--;
  return p + str;
}

function exit(msg) {
  mainLog(msg);
  process.exit(1);
}
